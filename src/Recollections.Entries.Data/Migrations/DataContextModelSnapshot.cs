// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neptuo.Recollections.Entries;

namespace Neptuo.Recollections.Entries.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Entries")
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Neptuo.Recollections.Entries.Entry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChapterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("StoryId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Neptuo.Recollections.Entries.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Neptuo.Recollections.Entries.Share", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfileUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EntryId", "StoryId", "ProfileUserId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("Neptuo.Recollections.Entries.Story", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("Neptuo.Recollections.Entries.StoryChapter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("StoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryChapter");
                });

            modelBuilder.Entity("Neptuo.Recollections.Entries.Entry", b =>
                {
                    b.HasOne("Neptuo.Recollections.Entries.StoryChapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.HasOne("Neptuo.Recollections.Entries.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId");

                    b.OwnsMany("Neptuo.Recollections.Entries.OrderedLocation", "Locations", b1 =>
                        {
                            b1.Property<string>("EntryId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Order")
                                .HasColumnType("int");

                            b1.Property<double?>("Altitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("EntryId", "Order");

                            b1.ToTable("EntriesLocations");

                            b1.HasOne("Neptuo.Recollections.Entries.Entry")
                                .WithMany("Locations")
                                .HasForeignKey("EntryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Neptuo.Recollections.Entries.Image", b =>
                {
                    b.HasOne("Neptuo.Recollections.Entries.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId");

                    b.OwnsOne("Neptuo.Recollections.Entries.ImageLocation", "Location", b1 =>
                        {
                            b1.Property<string>("ImageId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double?>("Altitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("ImageId");

                            b1.ToTable("Images");

                            b1.HasOne("Neptuo.Recollections.Entries.Image")
                                .WithOne("Location")
                                .HasForeignKey("Neptuo.Recollections.Entries.ImageLocation", "ImageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Neptuo.Recollections.Entries.StoryChapter", b =>
                {
                    b.HasOne("Neptuo.Recollections.Entries.Story", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
