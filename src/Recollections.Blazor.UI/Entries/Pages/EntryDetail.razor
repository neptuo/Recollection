@page "/entry/{EntryId}"
@inherits EntryDetailModel

@if (Model != null)
{
    <CascadingValue Value="@Model">
        <div class="entry-detail">
            <h2 class="title">
                <InlineTextEdit Value="@Model.Title" ValueChanged="@(async value => await SaveTitleAsync(value))" />
            </h2>
            <div class="datetime">
                <InlineDateEdit Value="@Model.When" ValueChanged="@(async value => await SaveWhenAsync(value))" Format="@UiOptions.DateFormat" />
            </div>
            <div class="story">
                <a @onclick="SelectStory">
                    <Icon Identifier="book" />
                    @if (Story != null && Story.StoryId != null)
                    {
                        @Story.StoryTitle
                        @if (Story.ChapterId != null)
                        {
                            <span>
                                - @Story.ChapterTitle
                            </span>
                        }
                    }
                    else
                    {
                        @: Select Story
                    }
                </a>
            </div>
            <div class="gps">
                <MapToggle Text="@($"Show Locations on Map ({Markers.Count(m => m.Longitude != null && m.Latitude != null)})")">
                    <Neptuo.Recollections.Components.Map Markers="@Markers" MarkersChanged="@(async () => await SaveLocationsAsync())" IsAdditive="true" MarkerSelected="@OnLocationSelected" />
                </MapToggle>
            </div>
            <div class="text">
                <InlineMarkdownEdit Value="@Model.Text" PlaceHolder="No description..." ValueChanged="@(async value => await SaveTextAsync(value))" />
            </div>
            <div class="images">
                @if (Images != null)
                {
                    @foreach (var image in Images)
                    {
                        <EntryImage Image="@image" />
                    }
                }

                @if (UploadProgress != null)
                {
                    foreach (var upload in UploadProgress)
                    {
                        @if (upload.IsSuccess)
                        {
                            <EntryImage Image="@upload.Image" />
                        }
                        else
                        {
                            <EntryImage PlaceHolder="@upload.Description" />
                        }
                    }
                }

                <div class="clear"></div>
            </div>

            <ActionPanel>

                <FileUpload Url="@Api.ImageUploadUrl(Model.Id)"
                            BearerToken="@UserState.BearerToken"
                            Progress="@(async e => await OnUploadProgressAsync(e))" />

                <button type="button" class="btn btn-sm btn-danger" @onclick="@(async () => await DeleteAsync())" title="Delete Entry">
                    <Icon Identifier="trash" />
                    Delete Entry
                </button>

            </ActionPanel>
        </div>
    </CascadingValue>

    <Modal @ref="@LocationEdit" Title="Location" FormSubmit="@(async () => await SaveSelectedLocationAsync())">
        <ChildContent>
            @if (SelectedLocation != null)
            {
                <div class="form-group">
                    <label for="latitude">Latitude:</label>
                    <input type="text" class="form-control" id="latitude" @bind="@SelectedLocation.Latitude" />
                </div>
                <div class="form-group">
                    <label for="latitude">Longitude:</label>
                    <input type="text" class="form-control" id="longitude" @bind="@SelectedLocation.Longitude" />
                </div>
                <div class="form-group">
                    <label for="latitude">Altitude:</label>
                    <input type="text" class="form-control" id="altitude" @bind="@SelectedLocation.Altitude" />
                </div>
            }
        </ChildContent>
        <Buttons>
            <button type="button" class="btn btn-sm btn-primary" @onclick="@(async () => await SaveSelectedLocationAsync())" title="Save Location">
                Save
            </button>
            <button type="button" class="btn btn-sm btn-danger" @onclick="@(async () => await DeleteSelectedLocationAsync())" title="Delete Location">
                <Icon Identifier="trash" />
                Delete
            </button>
        </Buttons>
    </Modal>

    <Modal @ref="@UploadError" Title="Upload Error">
        <ChildContent>
            @{
                var message = $"Some uploads ({UploadErrors.Count}) finished with errors.";
            }
            <Alert Mode="AlertMode.Warning" Message="@message" />

            <table class="table table-sm table-hover">
                <thead>
                    <tr>
                        <th scope="col">File</th>
                        <th scope="col">Error</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var error in UploadErrors)
                    {
                        <tr>
                            <td>
                                @error.Progress.Name
                            </td>
                            <td>
                                @error.Description (@error.Progress.StatusCode)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </ChildContent>
    </Modal>

    <StoryPicker @ref="StoryPicker" Selected="StorySelected" />
}